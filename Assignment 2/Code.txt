import numpy as np
from PIL import Image
from matplotlib import pyplot as plt






def CalculateHistogram(img):
  lst = [0] * 256
  width, height = img.size
  for i in range (width):
    for j in range (height):
      gray =img.getpixel((i,j))
      lst[gray] = lst[gray]+1
  return lst



def CalculateCumulativeHistogram(list):
  for i in range(256):
    if i != 0:
     list[i] = list[i-1]+list[i]
  return list



def CalculateEqualizedHistogram(list):
  lstNew = [0] * 256
  for i in range(256):
    lstNew[i]= int((255/(list[255]-list[0]))*(list[i]-list[0]))
  return lstNew



def CalculateEqualizedImage(img,list):
  width, height = img.size
  im1 = Image.new(mode="RGB", size=(width, height))
  im1 = im1.convert('L')
  for i in range (width):
    for j in range (height):
      gray =img.getpixel((i,j))
      newColor= list[gray]
      im1.putpixel((i,j),newColor)
  return im1

def RGBtoGray(img):
  width, height = img.size
  im1 = Image.new(mode="RGB", size=(width, height))
  im1 = im1.convert('L')
  for i in range (width):
    for j in range (height):
      R,G,B =img.getpixel((i,j))
      gray= int((R+G+B)/3)
      im1.putpixel((i,j),gray)
  return im1



def SegmentOptimalThresholding(img):
  width, height = img.size
  im1 = Image.new(mode="RGB", size=(width, height))
  im1.convert('L')
  average_value = GetThreshhold(img)
  for i in range(width):
    for j in range(height):
      gray =img.getpixel((i,j))
      if gray <= average_value:
        im1.putpixel((i,j),(0,0,0))
      else:
        im1.putpixel((i,j),(255,255,255))

  return im1

def GetThreshhold(img):
  width, height = img.size
  max= np.max(img)
  min= np.min(img)
  average_value = (max/2+min/2)

  while True:
    aboveAverage= 0
    aboveAverageNumber = 0
    averageAbove= 0
    belowAverageNumber = 0
    belowAverage = 0
    averageBelow = 0
    b = 0
    
    for i in range(width):
        for j in range(height):
            gray =img.getpixel((i,j))
            if (gray > average_value):
                aboveAverageNumber += 1
                aboveAverage += gray
            else:
                belowAverageNumber += 1
               	belowAverage += gray
                
    averageAbove = aboveAverage / aboveAverageNumber
    averageBelow = belowAverage / belowAverageNumber 
    new_average = int((averageAbove /2 + averageBelow /2))
    if new_average == int(average_value):
        break
    else:
        average_value = new_average

  return average_value



img = Image.open('/content/drive/MyDrive/Unity Images/5.jpg')
bands = img.getbands()
if bands==('R', 'G', 'B'):
  img=RGBtoGray(img)


lst = CalculateHistogram(img)
lst1 = CalculateCumulativeHistogram(lst)
lst2 = CalculateEqualizedHistogram(lst1)
equalizedImg = CalculateEqualizedImage(img,lst2)
SegmentedEqualizedImg = SegmentOptimalThresholding(equalizedImg)
SegmentedImg = SegmentOptimalThresholding(img)


plt.gray()

plt.subplots(nrows=2, ncols=2, figsize=(20, 20))
plt.subplot(2,2,1)
plt.title("Original image", fontdict=None, loc='center', pad=None,)
plt.imshow(img)
plt.subplot(2,2,2)
plt.title("Segmented original image", fontdict=None, loc='center', pad=None,)
plt.imshow(SegmentedImg)
plt.subplot(2,2,3)
plt.title("Equalized image", fontdict=None, loc='center', pad=None,)
plt.imshow(equalizedImg)
plt.subplot(2,2,4)
plt.title("Segmented equalized Image", fontdict=None, loc='center', pad=None,)
plt.imshow(SegmentedEqualizedImg)