import numpy as np
from PIL import Image
from matplotlib import pyplot as plt
from collections import defaultdict





def get_key(val,d):     #get key from value from dictionary d
    for key, value in d.items():
         if val == value:
             return key




def compareRGB(r,g,b,rd,gd,bd,delta): #red green blue reddictionary greendictionary bluedictionary
    if rd-delta <= r and r <= rd+delta and gd-delta <= g and g <= gd+delta and bd-delta <= b and b <= bd+delta :
      return True   #lw true yeb2a el loon mesh mehtageen nezawedo
    return False  #lw false yeb2a loon gdeed mehtag azawedo
  




def CalculateColorMap(img):
  colors = {}
  index = []
  width, height = img.size
  for i in range (width):
    temp =[]
    for j in range (height):
      r,g,b = img.getpixel((i,j))
      if i == 0 and j == 0:
        colors[(r,g,b)]=0
      if (r,g,b) not in colors.keys():
        colors[(r,g,b)]= len(list(colors.keys()))
      temp.append(colors[(r,g,b)])
    index.append(temp)
    
  return [colors,index]





def QuantizationLevels(d,x): #dictionary d and delta is x
  l=list(d.keys())   ##FADELY A REMOVE AWEL WAHDA F d2
  d1={}
  d2={}
  for i in l:
    r,g,b = i
    l1=list(d1.keys())
    flag = True
    flagPointer=0;
    for j in l1:
      rd,gd,bd=j
      if compareRGB(r,g,b,rd,gd,bd,x) and flag:
        flagPointer=d1.get(j)
        flag=False
    if flag:
      d1[i]= l.index(i)
    else:
      d2[d.get(i)]=flagPointer 
  return [d1,d2]





def AdjustIndex(index, dictionary):
  l=list(dictionary.keys())
  width=len(index)
  height= len(index[0])
  for i in range (width):
    for j in range (height):
      currIndex=index[i][j]
      if currIndex in dictionary:
        index[i][j]= dictionary.get(currIndex)
  return index





def ReverseColorMap(dictionary):
  d={}
  l=list(dictionary.keys())
  for x in l:
    d[dictionary.get(x)]=x
  return d




def ColorMapToImage(index,dictionary):
  width=len(index)
  height= len(index[0])
  im1 = Image.new(mode="RGB", size=(width, height))
  for i in range (width):
    for j in range (height):
      color=dictionary.get(index[i][j])
      im1.putpixel((i,j),color)
  return im1






img = Image.open('/content/drive/MyDrive/Unity Images/Test Image.jpg')

colors,index= CalculateColorMap(img)
d1,d2 = QuantizationLevels(colors,30)
newIndex = AdjustIndex(index,d2)
newDataMap = ReverseColorMap(d1)
im1 = ColorMapToImage(newIndex,newDataMap)

plt.subplots(nrows=1, ncols=1, figsize=(20, 20))

plt.subplot(1,1,1)
plt.imshow(im1)
